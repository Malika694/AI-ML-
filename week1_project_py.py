# -*- coding: utf-8 -*-
"""week1_project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMwt4zynl1LEdC0YdUgiOzVbXK_Oxe-D
"""

# Question 1: User Data Collector

def collect_user_data():
    user_data = {}
    user_data['name'] = input("Enter your name: ")
    user_data['age'] = int(input("Enter your age: "))
    user_data['email'] = input("Enter your email: ")

    while '@' not in user_data['email'] or '.' not in user_data['email']:
        print("Invalid email format. Please try again.")
        user_data['email'] = input("Enter your email: ")

    user_data['favorite_number'] = int(input("Enter your favorite number: "))

    print("\nUser Data:")
    for key, value in user_data.items():
        print(f"{key.capitalize()}: {value}")

# Question 2: Even or Odd

def is_even(number):
    return number % 2 == 0

number = int(input("Enter a number to check if it's even or odd: "))
if is_even(number):
    print(f"{number} is even.")
else:
    print(f"{number} is odd.")

# Question 3: Temperature Converter

def convert_temperature(temp, scale):
    if scale.upper() == 'C':
        return (temp * 9/5) + 32
    elif scale.upper() == 'F':
        return (temp - 32) * 5/9
    else:
        return None

scale = input("Convert from Celsius (C) or Fahrenheit (F)? Enter C or F: ")
temp = float(input("Enter the temperature value: "))
converted = convert_temperature(temp, scale)
if converted is not None:
    print(f"Converted temperature: {converted:.2f}")
else:
    print("Invalid scale entered.")

# Question 4: Finding Min & Max

def find_max_min(numbers_list):
    return max(numbers_list), min(numbers_list)

numbers = [int(input(f"Enter number {i+1}: ")) for i in range(5)]
maximum, minimum = find_max_min(numbers)
print(f"Maximum: {maximum}, Minimum: {minimum}")

# Question 5: Student Data Manager

def student_data_manager():
    students = []

    for i in range(3):
        name = input(f"Enter student {i+1} name: ")
        age = int(input(f"Enter {name}'s age: "))
        grade = input(f"Enter {name}'s grade: ")
        students.append((name, age, grade))

    student_dict = {student[0]: (student[1], student[2]) for student in students}

    print("\nStudent Data:")
    for name, (age, grade) in student_dict.items():
        print(f"{name}: Age {age}, Grade {grade}")

# Question 6: Inventory Management System

def update_inventory(inventory_dict, item, quantity):
    if item in inventory_dict:
        inventory_dict[item] = max(0, inventory_dict[item] + quantity)
    else:
        inventory_dict[item] = max(0, quantity)
    return inventory_dict

inventory = {
    "apples": 10,
    "bananas": 5,
    "oranges": 8,
    "grapes": 12,
    "mangoes": 7
}

print("Current Inventory:", inventory)

for _ in range(3):
    item = input("Enter the item to update: ")
    quantity = int(input("Enter the quantity (+ to add, - to remove): "))
    inventory = update_inventory(inventory, item, quantity)
    print("Updated Inventory:", inventory)


# Execute all functions
if __name__ == "__main__":
    collect_user_data()
    student_data_manager()

